@page "/change-password"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Change</PageTitle>



<EditForm Model="changeForm" OnValidSubmit="HandleChange" style="text-align: center; margin-top: 50px;">

    <h1>Change Password</h1>
    <p class="mt-4">Username:</p>
    <InputText @bind-Value="changeForm.Username" id="username"></InputText>
    <p class="mt-2">Old Password:</p>
    <InputText @bind-Value="changeForm.OldPassword" id="old_password" type="password"></InputText>
    <p class="mt-2">New Password:</p>
    <InputText @bind-Value="changeForm.NewPassword" id="new_password" type="password"></InputText>
    <p></p>
    <button type="submit" class="btn btn-primary btn-block mb-3">Change Password</button>
    <p></p>

    @if (!string.IsNullOrEmpty(message))
{
    <p style="color: red;">@message</p>
}

</EditForm>


@code {

    private ChangePasswordForm changeForm = new ChangePasswordForm();
    private string message = string.Empty;

    private async Task HandleChange()
    {
        if(string.IsNullOrEmpty(changeForm.Username))
        {
            message = "Username cannot be empty";
            return;
        }

        if(string.IsNullOrEmpty(changeForm.OldPassword))
        {
            message = "Old password cannot be empty";
            return;
        }

        if(string.IsNullOrEmpty(changeForm.NewPassword))
        {
            message = "New password cannot be empty";
            return;
        }

        if(changeForm.OldPassword == changeForm.NewPassword)
        {
            message = "New password cannot be same as the old";
            return;
        }

        var result = await HttpClient.PostAsJsonAsync(Constants.ChangePasswordrUrl, changeForm);

        if (!result.IsSuccessStatusCode)
        {
            message = "Change password failed";
            return;
        }

        NavigationManager.NavigateTo("Login");
    }

}